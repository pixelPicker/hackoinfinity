generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String            @id @default(cuid())
  name             String?
  email            String            @unique
  emailVerified    DateTime?
  password         String?
  image            String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  accounts         Account[]
  Message          Message[]
  sessions         Session[]
  roomParticipants RoomParticipant[] @relation("UserParticipants")
  createdRooms     Room[]            @relation("RoomCreator")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

/// Rooms table for storing unique room codes
model Room {
  id           String            @id @default(cuid())
  roomCode     String            @unique
  createdById  String
  createdAt    DateTime          @default(now())
  isActive     Boolean           @default(true)
  Message      Message[]
  participants RoomParticipant[]
  createdBy    User              @relation("RoomCreator", fields: [createdById], references: [id], onDelete: Cascade)

  @@map("rooms")
}

/// Join table tracking which users have joined which rooms
model RoomParticipant {
  id       String   @id @default(cuid())
  roomId   String
  userId   String
  joinedAt DateTime @default(now())
  room     Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
  user     User     @relation("UserParticipants", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([roomId, userId])
  @@map("room_participants")
}

model Message {
  id        String   @id @default(uuid())
  roomId    String
  userId    String
  content   String
  createdAt DateTime @default(now())
  room      Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
  sender    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
