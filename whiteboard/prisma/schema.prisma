generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String            @id @default(cuid())
  name          String?
  email         String            @unique
  emailVerified DateTime?
  password      String?
  image         String?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  accounts      Account[]
  posts         Post[]
  participants  RoomParticipant[]
  rooms         Rooms[]
  sessions      Session[]
  votes         Vote[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  img         String
  views       Int      @default(0)
  upvotes     Int      @default(0)
  downvotes   Int      @default(0)
  comments    Int      @default(0)
  shares      Int      @default(0)
  trending    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  authorId    String
  author      User     @relation(fields: [authorId], references: [id])
  votes       Vote[]
}

model Vote {
  id     Int    @id @default(autoincrement())
  type   String
  userId String
  postId Int
  post   Post   @relation(fields: [postId], references: [id])
  user   User   @relation(fields: [userId], references: [id])

  @@unique([userId, postId])
}

model Rooms {
  id           String            @id @default(cuid())
  roomCode     String            @unique
  createdById  String
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  objects      CanvasObject[]
  participants RoomParticipant[]
  createdBy    User              @relation(fields: [createdById], references: [id])
}

model RoomParticipant {
  id       String   @id @default(cuid())
  roomId   String
  userId   String
  joinedAt DateTime @default(now())
  room     Rooms    @relation(fields: [roomId], references: [id])
  user     User     @relation(fields: [userId], references: [id])
}

model CanvasObject {
  id             String   @id @default(cuid())
  type           String
  shapeName      String?
  stroke         String?
  strokeWidth    Int?
  fill           String?
  points         Json?
  x              Float?
  y              Float?
  width          Float?
  height         Float?
  rotation       Float?
  text           String?
  fontSize       Int?
  fontFamily     String?
  fontStyle      String?
  textDecoration String?
  align          String?
  lineHeight     Float?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  roomId         String
  room           Rooms    @relation(fields: [roomId], references: [id], onDelete: Cascade)
}
