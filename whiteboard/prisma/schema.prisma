generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  password      String?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  votes         Vote[]
}

// Auth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
model Post {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  img         String
  views       Int      @default(0)
  upvotes     Int      @default(0)
  downvotes   Int      @default(0)
  comments    Int      @default(0)
  shares      Int      @default(0)
  trending    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  authorId    String
  author      User     @relation(fields: [authorId], references: [id])
  votes       Vote[]
}

model Vote {
  id     Int     @id @default(autoincrement())
  type   String  // "up" or "down"
  userId String
  postId Int
  
  user   User    @relation(fields: [userId], references: [id])
  post   Post    @relation(fields: [postId], references: [id])
  
  @@unique([userId, postId])
}
